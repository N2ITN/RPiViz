# base-image for python on any machine using a template variable,
# see more about dockerfile templates here:http://docs.resin.io/pages/deployment/docker-templates
FROM resin/raspberrypi3-python

RUN pwd

RUN sudo apt-get update && sudo apt-get upgrade


RUN sudo pip install picamera requests sh 

RUN sudo apt-get install libopencv-dev python-opencv libboost-python-dev  cmake 
RUN sudo pip install dlib==19.1.0
RUN sudo apt-get install apt-utils htop python-pip python-dev
RUN sudo apt-get install -y autoconf automake libtool gcc-4.8 g++-4.8
# RUN sudo pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.11.0rc1-cp27-none-linux_x86_64.whl



WORKDIR /usr/src/app/raspiviz

RUN curl -o shape_predictor_68_face_landmarks.dat.bz2 http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2 && \ 
 bunzip2  shape_predictor_68_face_landmarks.dat.bz2 && \
 pwd

COPY shape_predictor_68_face_landmarks.dat shape_predictor_68_face_landmarks.dat

WORKDIR /usr/src/app/
RUN git clone https://github.com/tensorflow/tensorflow.git

RUN cd tensorflow && \
  ./tensorflow/contrib/makefile/download_dependencies.sh && \
 ./tensorflow/contrib/makefile/compile_pi_protobuf.sh

RUN sudo ldconfig  # refresh shared library cache
 
RUN make -f tensorflow/contrib/makefile/Makefile HOST_OS=PI TARGET=PI \
 OPTFLAGS="-Os -mfpu=neon-vfpv4 -funsafe-math-optimizations -ftree-vectorize" CXX=g++-4.8

COPY  tensorflow tensorflow





# Copy requirements.txt first for better cache on later pushes
COPY ./requirements.txt /requirements.txt

#RUN make -f tensorflow/contrib/makefile/Makefile HOST_OS=PI TARGET=PI \
# OPTFLAGS="-Os -mfpu=neon-vfpv4 -funsafe-math-optimizations -ftree-vectorize" CXX=g++-4.8


# This will copy all files in our root to the working directory in the container
COPY . ./






# switch on systemd init system in container
ENV INITSYSTEM on

CMD ["python", "-m", "SimpleHTTPServer","80"]

